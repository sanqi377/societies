"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a = require('../../../utils/util'), ajax = _a.ajax, formatMsgTime = _a.formatMsgTime;
var app = getApp();
var list = [];
var count = 0;
var isBottom = false;
var type;
Page({
    list: [],
    onShow: function () {
        if (typeof this.getTabBar === 'function' && this.getTabBar()) {
            this.getTabBar().setData({
                selected: 1
            });
        }
        this.getDynamic();
    },
    goPublish: function () {
        wx.navigateTo({
            url: "/pages/societies/publish/index"
        });
    },
    handle: function (e) {
        list = [];
        count = 0;
        isBottom = false;
        type = e.detail === 0 ? 'focus' : (e.detail === 1 ? '' : 'societies');
        this.getDynamic(type);
        console.log(e.detail, type);
    },
    subscribe: function (e) {
        var _this = this;
        var index = e.currentTarget.dataset.index;
        var data = {
            subscribe: app.globalData.uid,
            be_subscribe: e.currentTarget.dataset.be_subscribe,
            update_time: Date.parse(new Date()) / 1000
        };
        app.globalData.subscribe(data).then(function () {
            _this.data.list[index].fans = true;
            _this.setData({
                list: _this.data.list
            });
        });
    },
    goInfo: function (e) {
        wx.navigateTo({
            url: "/pages/user/info/index?uid=" + e.currentTarget.dataset.uid
        });
    },
    cancelSubscribe: function (e) {
        var _this = this;
        var index = e.currentTarget.dataset.index;
        var data = {
            subscribe: app.globalData.uid,
            be_subscribe: e.currentTarget.dataset.be_subscribe,
        };
        app.globalData.unSubscribe({
            data: data,
            success: function () {
                _this.data.list[index].fans = false;
                _this.setData({
                    list: _this.data.list
                });
            }
        });
    },
    getDynamic: function (type) {
        var _this = this;
        count++;
        if (!isBottom) {
            console.log(type);
            ajax('Dynamic/getList', { uid: app.globalData.uid, page: count, type: type }).then(function (res) {
                wx.stopPullDownRefresh();
                if (res.data.data.length > 0) {
                    for (var key in res.data.data) {
                        res.data.data[key].create_time = formatMsgTime(res.data.data[key].create_time * 1000);
                        list.push(res.data.data[key]);
                    }
                    _this.setData({
                        list: list
                    });
                }
                else {
                    isBottom = true;
                }
            });
        }
    },
    onLoad: function () {
    },
    onReady: function () {
    },
    onHide: function () {
        list = [];
        count = 0;
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
        list = [];
        count = 0;
        this.getDynamic(type);
    },
    onReachBottom: function () {
        this.getDynamic(type);
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,