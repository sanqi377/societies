"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ajax = require('../../../utils/util').ajax;
var _a = getApp().globalData, io = _a.io, monitor = _a.monitor;
Page({
    data: {
        data: {
            message: '',
            send: '',
            accept: '',
            type: 'private',
            create_time: 0,
            fid: 0
        },
        info: {
            s_avatar: '',
            a_avatar: '',
            a_name: ''
        },
        uid: 0,
        message: []
    },
    getInput: function (e) {
        var _a;
        this.setData((_a = {},
            _a['data.message'] = e.detail.value,
            _a));
    },
    send: function () {
        var _a;
        var _this = this;
        this.setData((_a = {},
            _a['data.create_time'] = Date.parse((new Date())) / 1000,
            _a));
        io.send({
            data: JSON.stringify(this.data.data),
            success: function () {
                var _a;
                _this.setData((_a = {},
                    _a['data.message'] = '',
                    _a));
            }
        });
    },
    onLoad: function (e) {
        var _a;
        var _this = this;
        var uid = wx.getStorageSync('uid');
        this.setData((_a = {},
            _a['data.accept'] = e.accept,
            _a['data.send'] = e.send,
            _a['data.fid'] = e.fid,
            _a), function () {
            var send = uid == _this.data.data.send ? _this.data.data.send : _this.data.data.accept;
            var accept = uid == _this.data.data.send ? _this.data.data.accept : _this.data.data.send;
            ajax('message/getAvatar', { uid: send, accept: accept }).then(function (res) {
                var _a;
                _this.setData((_a = {},
                    _a['info.s_avatar'] = res.data.data.s_avatar,
                    _a['info.a_avatar'] = res.data.data.a_avatar,
                    _a['info.a_name'] = res.data.data.a_name,
                    _a));
            });
            ajax('message/updateUnread', { fid: _this.data.data.fid, send: _this.data.data.send });
        });
        monitor(function (res) {
            var msg = JSON.parse(res);
            console.log(msg);
            if (msg.send === _this.data.data.send && msg.accept === _this.data.data.accept) {
                _this.data.message.push(msg);
                _this.setData({
                    message: _this.data.message,
                }, function () {
                    var toView = "msg-" + (_this.data.message.length - 1);
                    _this.setData({
                        toView: toView
                    });
                });
            }
            if (msg.send === _this.data.data.accept && msg.accept === _this.data.data.send) {
                _this.data.message.push(msg);
                _this.setData({
                    message: _this.data.message,
                }, function () {
                    var toView = "msg-" + (_this.data.message.length - 1);
                    _this.setData({
                        toView: toView
                    });
                });
            }
            ajax('message/updateUnread', { fid: _this.data.data.fid, send: _this.data.data.send });
        });
    },
    getHistoryMsg: function () {
        var _this = this;
        ajax('message/getHistoryMsg', { fid: this.data.data.fid }).then(function (res) {
            _this.setData({
                message: res.data.data
            }, function () {
                var toView = "msg-" + (res.data.data.length - 1);
                _this.setData({
                    toView: toView
                });
            });
        });
    },
    onReady: function () {
    },
    onShow: function () {
        this.getHistoryMsg();
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,