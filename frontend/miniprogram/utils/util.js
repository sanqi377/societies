"use strict";
var ajaxHttp = function (url, data) {
    var token = wx.getStorageSync('token');
    return new Promise(function (resolve, reject) {
        wx.request({
            url: url,
            method: 'POST',
            data: data,
            header: {
                token: token
            },
            success: function (res) {
                resolve(res);
            },
            fail: function (err) {
                reject(err);
            }
        });
    });
};
var checkLogin = function () {
    var token = wx.getStorageSync('token');
    if (!token)
        return false;
    return true;
};
var getFont = function () {
    return new Promise(function (resolve) {
        wx.loadFontFace({
            family: 'PingFang',
            source: 'url("http://localhost:3000/index/index/getFont")',
            success: function () {
                resolve(true);
            }
        });
    });
};
var formatMsgTime = function (timespan) {
    var dateTime = new Date(timespan);
    var year = dateTime.getFullYear();
    var month = dateTime.getMonth() + 1;
    var day = dateTime.getDate();
    var hour = dateTime.getHours();
    var minute = dateTime.getMinutes();
    var now_new = Date.parse((new Date()));
    var milliseconds = 0;
    var timeSpanStr;
    milliseconds = now_new - timespan;
    if (milliseconds <= 1000 * 60 * 1) {
        timeSpanStr = '刚刚';
    }
    else if (1000 * 60 * 1 < milliseconds && milliseconds <= 1000 * 60 * 60) {
        timeSpanStr = Math.round((milliseconds / (1000 * 60))) + '分钟前';
    }
    else if (1000 * 60 * 60 * 1 < milliseconds && milliseconds <= 1000 * 60 * 60 * 24) {
        timeSpanStr = Math.round(milliseconds / (1000 * 60 * 60)) + '小时前';
    }
    else if (1000 * 60 * 60 * 24 < milliseconds && milliseconds <= 1000 * 60 * 60 * 24 * 15) {
        timeSpanStr = Math.round(milliseconds / (1000 * 60 * 60 * 24)) + '天前';
    }
    else if (milliseconds > 1000 * 60 * 60 * 24 * 15 && year == new Date().getFullYear()) {
        timeSpanStr = month + '-' + day + ' ' + hour + ':' + minute;
    }
    else {
        timeSpanStr = year + '-' + month + '-' + day + ' ' + hour + ':' + minute;
    }
    return timeSpanStr;
};
module.exports = {
    ajax: ajaxHttp,
    checkLogin: checkLogin,
    getFont: getFont,
    formatMsgTime: formatMsgTime
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUtBLElBQUksUUFBUSxHQUFHLFVBQUMsR0FBVyxFQUFFLElBQVk7SUFDdkMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN0QyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07UUFDakMsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNULEdBQUcsRUFBRSxHQUFHO1lBQ1IsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRTtnQkFDTixLQUFLLE9BQUE7YUFDTjtZQUNELE9BQU8sWUFBQyxHQUFHO2dCQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNkLENBQUM7WUFDRCxJQUFJLEVBQUUsVUFBQyxHQUFRO2dCQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNiLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQU1ELElBQUksVUFBVSxHQUFRO0lBQ3BCLElBQUksS0FBSyxHQUFXLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDOUMsSUFBSSxDQUFDLEtBQUs7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUN4QixPQUFPLElBQUksQ0FBQTtBQUNiLENBQUMsQ0FBQTtBQU1ELElBQUksT0FBTyxHQUFHO0lBQ1osT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU87UUFDekIsRUFBRSxDQUFDLFlBQVksQ0FBQztZQUNkLE1BQU0sRUFBRSxVQUFVO1lBQ2xCLE1BQU0sRUFBRSxrREFBa0Q7WUFDMUQsT0FBTyxFQUFFO2dCQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNmLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQUVELElBQUksYUFBYSxHQUFHLFVBQUMsUUFBYTtJQUVoQyxJQUFJLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUVqQyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDakMsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNuQyxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUIsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQzlCLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNsQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBUSxDQUFDLENBQUE7SUFFN0MsSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFBO0lBQ3BCLElBQUksV0FBVyxDQUFBO0lBRWYsWUFBWSxHQUFHLE9BQU8sR0FBRyxRQUFRLENBQUM7SUFFbEMsSUFBSSxZQUFZLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDakMsV0FBVyxHQUFHLElBQUksQ0FBQTtLQUNuQjtTQUNJLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsWUFBWSxJQUFJLFlBQVksSUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN2RSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFBO0tBQy9EO1NBQ0ksSUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsWUFBWSxJQUFJLFlBQVksSUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDakYsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQTtLQUNsRTtTQUNJLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLFlBQVksSUFBSSxZQUFZLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN2RixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQTtLQUN0RTtTQUNJLElBQUksWUFBWSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7UUFDcEYsV0FBVyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQTtLQUM1RDtTQUFNO1FBQ0wsV0FBVyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFBO0tBQ3pFO0lBQ0QsT0FBTyxXQUFXLENBQUE7QUFDcEIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNmLElBQUksRUFBRSxRQUFRO0lBQ2QsVUFBVSxZQUFBO0lBQ1YsT0FBTyxTQUFBO0lBQ1AsYUFBYSxlQUFBO0NBQ2QsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiB3eC5yZXF1ZXN0IOWwgeijhVxyXG4gKiBAcGFyYW0gdXJsIOivt+axgiB1cmxcclxuICogQHBhcmFtIGRhdGEg6K+35rGC5pWw5o2uXHJcbiAqL1xyXG52YXIgYWpheEh0dHAgPSAodXJsOiBzdHJpbmcsIGRhdGE6IG9iamVjdCkgPT4ge1xyXG4gIGxldCB0b2tlbiA9IHd4LmdldFN0b3JhZ2VTeW5jKCd0b2tlbicpXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIHd4LnJlcXVlc3Qoe1xyXG4gICAgICB1cmw6IHVybCxcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgIGhlYWRlcjoge1xyXG4gICAgICAgIHRva2VuXHJcbiAgICAgIH0sXHJcbiAgICAgIHN1Y2Nlc3MocmVzKSB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIGZhaWw6IChlcnI6IGFueSkgPT4ge1xyXG4gICAgICAgIHJlamVjdChlcnIpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSlcclxufVxyXG5cclxuLyoqXHJcbiAqIOajgOa1i+aYr+WQpueZu+W9lVxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbnZhciBjaGVja0xvZ2luOiBhbnkgPSAoKSA9PiB7XHJcbiAgdmFyIHRva2VuOiBzdHJpbmcgPSB3eC5nZXRTdG9yYWdlU3luYygndG9rZW4nKVxyXG4gIGlmICghdG9rZW4pIHJldHVybiBmYWxzZVxyXG4gIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDliqDovb3nvZHnu5zlrZfkvZNcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG52YXIgZ2V0Rm9udCA9ICgpID0+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgIHd4LmxvYWRGb250RmFjZSh7XHJcbiAgICAgIGZhbWlseTogJ1BpbmdGYW5nJyxcclxuICAgICAgc291cmNlOiAndXJsKFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL2luZGV4L2luZGV4L2dldEZvbnRcIiknLFxyXG4gICAgICBzdWNjZXNzOiAoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZSh0cnVlKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0pXHJcbn1cclxuXHJcbmxldCBmb3JtYXRNc2dUaW1lID0gKHRpbWVzcGFuOiBhbnkpID0+IHtcclxuXHJcbiAgdmFyIGRhdGVUaW1lID0gbmV3IERhdGUodGltZXNwYW4pXHJcblxyXG4gIHZhciB5ZWFyID0gZGF0ZVRpbWUuZ2V0RnVsbFllYXIoKVxyXG4gIHZhciBtb250aCA9IGRhdGVUaW1lLmdldE1vbnRoKCkgKyAxXHJcbiAgdmFyIGRheSA9IGRhdGVUaW1lLmdldERhdGUoKVxyXG4gIHZhciBob3VyID0gZGF0ZVRpbWUuZ2V0SG91cnMoKVxyXG4gIHZhciBtaW51dGUgPSBkYXRlVGltZS5nZXRNaW51dGVzKClcclxuICB2YXIgbm93X25ldyA9IERhdGUucGFyc2UoKG5ldyBEYXRlKCkpIGFzIGFueSlcclxuXHJcbiAgdmFyIG1pbGxpc2Vjb25kcyA9IDBcclxuICB2YXIgdGltZVNwYW5TdHJcclxuXHJcbiAgbWlsbGlzZWNvbmRzID0gbm93X25ldyAtIHRpbWVzcGFuO1xyXG5cclxuICBpZiAobWlsbGlzZWNvbmRzIDw9IDEwMDAgKiA2MCAqIDEpIHtcclxuICAgIHRpbWVTcGFuU3RyID0gJ+WImuWImidcclxuICB9XHJcbiAgZWxzZSBpZiAoMTAwMCAqIDYwICogMSA8IG1pbGxpc2Vjb25kcyAmJiBtaWxsaXNlY29uZHMgPD0gMTAwMCAqIDYwICogNjApIHtcclxuICAgIHRpbWVTcGFuU3RyID0gTWF0aC5yb3VuZCgobWlsbGlzZWNvbmRzIC8gKDEwMDAgKiA2MCkpKSArICfliIbpkp/liY0nXHJcbiAgfVxyXG4gIGVsc2UgaWYgKDEwMDAgKiA2MCAqIDYwICogMSA8IG1pbGxpc2Vjb25kcyAmJiBtaWxsaXNlY29uZHMgPD0gMTAwMCAqIDYwICogNjAgKiAyNCkge1xyXG4gICAgdGltZVNwYW5TdHIgPSBNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyAvICgxMDAwICogNjAgKiA2MCkpICsgJ+Wwj+aXtuWJjSdcclxuICB9XHJcbiAgZWxzZSBpZiAoMTAwMCAqIDYwICogNjAgKiAyNCA8IG1pbGxpc2Vjb25kcyAmJiBtaWxsaXNlY29uZHMgPD0gMTAwMCAqIDYwICogNjAgKiAyNCAqIDE1KSB7XHJcbiAgICB0aW1lU3BhblN0ciA9IE1hdGgucm91bmQobWlsbGlzZWNvbmRzIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKSArICflpKnliY0nXHJcbiAgfVxyXG4gIGVsc2UgaWYgKG1pbGxpc2Vjb25kcyA+IDEwMDAgKiA2MCAqIDYwICogMjQgKiAxNSAmJiB5ZWFyID09IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSkge1xyXG4gICAgdGltZVNwYW5TdHIgPSBtb250aCArICctJyArIGRheSArICcgJyArIGhvdXIgKyAnOicgKyBtaW51dGVcclxuICB9IGVsc2Uge1xyXG4gICAgdGltZVNwYW5TdHIgPSB5ZWFyICsgJy0nICsgbW9udGggKyAnLScgKyBkYXkgKyAnICcgKyBob3VyICsgJzonICsgbWludXRlXHJcbiAgfVxyXG4gIHJldHVybiB0aW1lU3BhblN0clxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBhamF4OiBhamF4SHR0cCxcclxuICBjaGVja0xvZ2luLFxyXG4gIGdldEZvbnQsXHJcbiAgZm9ybWF0TXNnVGltZVxyXG59Il19